name: Build

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build-shaders:
    name: Build Shaders
    needs: pack-resources
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/download-artifact@v4
      id: resources
      with:
        pattern: "neo-*-*-resources"
        path: "./resources"
    
    - name: Download resources artifact
      run: |
        echo "${{ steps.resources.outputs.download-path }}/*"
        Set-Location -Path "${{ steps.resources.outputs.download-path }}/*"
        # Robocopy returns exit code 1 for "All files were copied successfully.", so we have to manually handle it here
        robocopy .\neo "${{ github.workspace }}/mp/game" /move /e /j; if ($lastexitcode -ne 1) { $global:LASTEXITCODE = $null }
    
    - name: Set env vars for shader build scripts
      shell: bash
      run : |
        SDKDIR="C:\SDK2013"
        SDKBINDIR="$SDKDIR\bin"
        echo "SDKDIR=$SDKDIR" >> "$GITHUB_ENV"
        echo "SDKBINDIR=$SDKBINDIR" >> "$GITHUB_ENV"

    - name: Setup Perl
      uses: shogo82148/actions-setup-perl@v1
      with:
        distribution: strawberry

    - name: Install Perl dependencies
      shell: cmd
      run: perl -MCPAN -e "install String::CRC32"

    - uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x86

    - name: Setup steamcmd
      uses: CyberAndrii/setup-steamcmd@v1

    - name: Install Source SDK Base 2013 Multiplayer
      run: >
        steamcmd
        +force_install_dir "${{ env.SDKDIR }}"
        +login ${{ secrets.STEAM_USERNAME }} ${{ secrets.STEAM_PASSWORD }}
        +app_update 243750 validate
        +quit

    - name: Build shaders
      working-directory: ${{ github.workspace }}/mp/src/materialsystem/stdshaders
      shell: cmd
      run: .\buildhl2mpshaders.bat

    - name: Get shader artifact name
      working-directory: ${{ steps.resources.outputs.download-path }}
      shell: bash
      run: >
        echo "artifact=$(find . -regex '\.\/neo-\w*-\w*-resources' |
        grep -o 'neo-.*[^-resources]')-shaders"
        >> "$GITHUB_ENV"

    - name: Upload shaders
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.artifact }}
        path: ${{ github.workspace }}/mp/game/neo/shaders

  build:
    name: ${{ matrix.platform.display_name }} ${{ matrix.preset_build_type.display_name }}

    runs-on: ${{ matrix.platform.os }}

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false

      matrix:
        platform:
        - { display_name: 'Linux Native Libraries', os: ubuntu-latest, preset_os: linux }
        - { display_name: 'Windows Native Libraries', os: windows-latest, preset_os: windows }

        preset_build_type:
        - { display_name: 'Debug', name: debug }
        - { display_name: 'Release', name: release }

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      run: |
        preset_name="${{ matrix.platform.preset_os }}-${{ matrix.preset_build_type.name }}"
        workspace_dir="${{ github.workspace }}"
        source_dir=${workspace_dir//\\//}/mp/src
        build_dir=${workspace_dir//\\//}/mp/src/build/$preset_name
        install_dir=$build_dir/install
        echo "source_dir=$source_dir" >> "$GITHUB_ENV"
        echo "build_dir=$build_dir" >> "$GITHUB_ENV"
        echo "install_dir=$install_dir" >> "$GITHUB_ENV"
        echo "preset_name=$preset_name" >> "$GITHUB_ENV"

    - name: Install packages (Linux)
      if: ${{ matrix.platform.os == 'ubuntu-latest' }}
      run: |
        sudo apt update
        sudo apt install gcc-multilib g++-multilib ninja-build -y

    - name: Install packages (Windows)
      if: ${{ matrix.platform.os == 'windows-latest' }}
      run: choco install -y ninja

    - uses: ilammy/msvc-dev-cmd@v1
      if: ${{ matrix.platform.os == 'windows-latest' }}
      with:
        arch: x86

    - name: Print PATH
      if: ${{ matrix.platform.os == 'windows-latest' }}
      run: |
        echo "PATH: $PATH"

    - name: Git fetch tags
      run: git fetch origin --tags

    # Libraries

    - name: CMake configure libraries build
      working-directory: ${{ env.source_dir }}
      run: >
        cmake
        --preset ${{ env.preset_name }}
        -DCMAKE_INSTALL_PREFIX=${{ env.install_dir }}
        -DNEO_CI_BUILD=ON
        -DNEO_USE_CCACHE=OFF
        -DNEO_COPY_LIBRARIES=OFF
        -DNEO_USE_SEPARATE_BUILD_INFO=ON
        -DNEO_INSTALL_LIBRARIES=ON
        -DNEO_INSTALL_RESOURCES=OFF

    - name: CMake libraries build
      working-directory: ${{ env.source_dir }}
      run: cmake --build --preset ${{ env.preset_name }} --parallel --verbose

    - name: Install libraries
      run: cmake --install ${{ env.build_dir }}

    # Dedicated library

    - name: CMake reconfigure dedicated library build
      working-directory: ${{ env.source_dir }}
      run: >
        cmake
        --preset ${{ env.preset_name }}
        -DNEO_DEDICATED=ON

    - name: CMake dedicated library build
      working-directory: ${{ env.source_dir }}
      run: cmake --build --preset ${{ env.preset_name }} --parallel --verbose

    - name: Install dedicated library
      run: cmake --install ${{ env.build_dir }}

    # Artifacts

    - name: Get library artifact names
      working-directory: ${{ env.install_dir }}
      run: |
        echo "libraries=$(find . -regex '\.\/neo-\w*-\w*-libraries-\w*-\w*' -printf '%f')" >> "$GITHUB_ENV"
        echo "libraries_debuginfo=$(find . -regex '\.\/neo-\w*-\w*-libraries-debuginfo-\w*-\w*' -printf '%f')" >> "$GITHUB_ENV"
        echo "dedicated=$(find . -regex '\.\/neo-\w*-\w*-dedicated-\w*-\w*' -printf '%f')" >> "$GITHUB_ENV"
        echo "dedicated_debuginfo=$(find . -regex '\.\/neo-\w*-\w*-dedicated-debuginfo-\w*-\w*' -printf '%f')" >> "$GITHUB_ENV"

    - name: Upload libraries
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.libraries }}
        path: ${{ env.install_dir }}/${{ env.libraries }}

    - name: Upload libraries debug information
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.libraries_debuginfo }}
        path: ${{ env.install_dir }}/${{ env.libraries_debuginfo }}

    - name: Upload dedicated library
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.dedicated }}
        path: ${{ env.install_dir }}/${{ env.dedicated }}

    - name: Upload dedicated library debug information
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.dedicated_debuginfo }}
        path: ${{ env.install_dir }}/${{ env.dedicated_debuginfo }}

  pack-resources:
    name: Windows Native Resources

    runs-on: windows-latest

    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      run: |
        workspace_dir="${{ github.workspace }}"
        source_dir=${workspace_dir//\\//}/mp/src
        build_dir=${workspace_dir//\\//}/mp/src/build/windows-release
        install_dir=$build_dir/install
        echo "source_dir=$source_dir" >> "$GITHUB_ENV"
        echo "build_dir=$build_dir" >> "$GITHUB_ENV"
        echo "install_dir=$install_dir" >> "$GITHUB_ENV"

    - name: Install packages
      run: choco install -y ninja

    - uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x86

    # Resources

    - name: CMake configure resources build
      working-directory: ${{ env.source_dir }}
      run: >
        cmake
        --preset windows-release
        -DCMAKE_INSTALL_PREFIX=${{ env.install_dir }}
        -DNEO_USE_CCACHE=OFF
        -DNEO_COPY_LIBRARIES=OFF
        -DNEO_INSTALL_LIBRARIES=OFF
        -DNEO_INSTALL_RESOURCES=ON

    - name: Install resources
      run: cmake --install ${{ env.build_dir }}

    - name: Cleanup stale shaders
      working-directory: ${{ env.install_dir }}
      shell: pwsh
      run: |
        Set-Location -Path .\neo-*-*-resources\neo
        Remove-Item -Recurse -Path .\shaders

    - name: Get artifact name
      working-directory: ${{ env.install_dir }}
      run: echo "resources=$(echo neo-*-*-resources)" >> "$GITHUB_ENV"

    - name: Upload resources
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.resources }}
        path: ${{ env.install_dir }}/${{ env.resources }}
  upload-release:
    name: Automatic Release Upload

    needs: [build, build-shaders]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Packing artifacts
      run: 'parallel 7z a -tzip -mx=9 "{}.zip" "./{}/*" ::: neo-*'
        
    - name: Create latest release
      if: github.ref == 'refs/heads/master'
      uses: slord399/action-automatic-releases@v1.0.1
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        prerelease: true
        automatic_release_tag: "latest"
        title: "Latest Build"
        files: neo-*.zip

    - name: Create stable release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: slord399/action-automatic-releases@v1.0.1
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        prerelease: true
        automatic_release_tag: "${{ github.ref_name }}"
        title: "${{ github.ref_name }}"
        files: neo-*.zip
